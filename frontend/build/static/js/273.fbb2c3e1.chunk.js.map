{"version":3,"file":"static/js/273.fbb2c3e1.chunk.js","mappings":"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","sources":["components/Event/update-event.js","components/Event/event-members.js","components/Event/remove-event.js","components/Event/event-status.js","components/Event/utilities/event-options.js","components/Event/event-item.js","components/Event/manage-members.js","components/Comments/remove-comment.js","components/Comments/utilities/comment-options.js","components/Comments/update-comment.js","components/Comments/utilities/comment-builder.js","components/Comments/comment-item.js","components/Comments/create-comment.js","../node_modules/react-bootstrap/esm/BreadcrumbItem.js","../node_modules/react-bootstrap/esm/Breadcrumb.js","components/SiteElements/breadcrumbs.js","components/SiteElements/info-cards.js","components/Dashboards/event-dash.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Card, Form } from \"react-bootstrap\";\nimport { updateEvent, getSingleEvent } from \"../../actions/eventActions\";\nimport { useDispatch } from \"react-redux\";\nimport CTAButton from \"../SiteElements/cta-button\";\nimport { useParams } from \"react-router-dom\";\nimport { emitter } from \"../client/socket\";\nimport { MentionFilter } from \"../Utilities/mention\";\nimport { Cross, Submit } from \"../SiteElements/icons\";\n\nfunction UpdateEvent(props, { handleUpate }) {\n  const dispatch = useDispatch();\n  const params = useParams();\n  const [title, setTitle] = useState(props.title);\n  const [maxMembers, setMaxMembers] = useState(props.maxMembers);\n  const [details, setDetails] = useState(props.details);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const postData = {\n      title: title,\n      maxMember: maxMembers,\n      details: details,\n    };\n\n    dispatch(updateEvent(props.eventId, postData)).then(() => {\n      dispatch(getSingleEvent(params.id));\n      emitter(MentionFilter(details));\n    });\n    props.handleUpate();\n  };\n\n  return (\n    <Form\n      onSubmit={(e) => {\n        handleSubmit(e);\n      }}\n    >\n      <Card className={props.cardStyle}>\n        <Card.Header>\n          <h3 className=\"fw-bold m-0\">Update event</h3>\n        </Card.Header>\n        <Card.Body>\n          <Form.Group className=\"d-flex mb-3\">\n            <Form.Control\n              className=\"me-2\"\n              type=\"title\"\n              placeholder=\"Event Title\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n              required\n            />\n\n            <Form.Control\n              type=\"number\"\n              placeholder=\"Maximum Members\"\n              value={maxMembers || \"\"}\n              onChange={(e) => setMaxMembers(parseInt(e.target.value))}\n              min=\"2\"\n              required\n            />\n          </Form.Group>\n          <Form.Group>\n            <Form.Control\n              spellCheck={true}\n              placeholder=\"What's on your mind?\"\n              as=\"textarea\"\n              value={details || \"\"}\n              onChange={(e) => setDetails(e.target.value)}\n              required\n            />\n          </Form.Group>\n          <div className=\"d-flex justify-content-between mt-3\">\n            <CTAButton\n              type={\"\"}\n              btnStyle={\"postBtn-placements\"}\n              variant={\"primary\"}\n              onClick={props.handleUpate}\n              placeholder={\n                <div className=\"d-flex align-items-center\">\n                  <Cross />\n                  Cancel\n                </div>\n              }\n            />\n            <CTAButton\n              type={\"submit\"}\n              btnStyle={\"postBtn-placements cta_button\"}\n              variant={\"primary\"}\n              formValidation={\n                title === \"\" ||\n                maxMembers === \"\" ||\n                details === \"\" ||\n                details === \"<p><br></p>\"\n                  ? true\n                  : false\n              }\n              isLoading={\"\"}\n              placeholder={\n                <div className=\"d-flex align-items-center\">\n                  <Submit />\n                  Publish\n                </div>\n              }\n            />\n          </div>\n        </Card.Body>\n      </Card>{\" \"}\n    </Form>\n  );\n}\n\nexport default UpdateEvent;\n","import React from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { DisplayImage } from \"../SiteElements/user-displayimg\";\nimport ModalItem from \"./modal-item\";\nimport { EventMembersHandler } from \"./utilities/action-handlers\";\nimport { Accepted } from \"./utilities/event-builder\";\n\nfunction EventMembers(props) {\n  const ref = React.createRef();\n  const eventMembers = EventMembersHandler(props.eventId);\n  const acceptedMembers = Accepted(eventMembers);\n\n  return (\n    <>\n      <ModalItem\n        ref={ref}\n        customBtn={\"\"}\n        btnIcon={\n          <div className=\"d-flex img-group\">\n            {acceptedMembers.slice(0, 4).map((member) => {\n              return (\n                <img\n                  key={member.id}\n                  src={member.gravatarImage}\n                  className=\"members-img \"\n                  alt=\"Img\"\n                />\n              );\n            })}\n            {acceptedMembers.length > 4 ? (\n              <span className=\"members-count\">+{eventMembers.length - 4}</span>\n            ) : (\n              \"\"\n            )}\n          </div>\n        }\n        error={\"\"}\n        title={\"Members\"}\n        content={\n          <>\n            {eventMembers.length === 0 ? (\n              <strong>Nobody here yet....</strong>\n            ) : (\n              <ListGroup className=\"members-list\" variant=\"flush\">\n                {acceptedMembers.map((member) => (\n                  <ListGroup.Item key={member.id}>\n                    <div className=\"d-flex align-items-center\">\n                      <DisplayImage image={member.gravatarImage} />\n                      <div className=\"ms-4\">\n                        <Link\n                          to={{\n                            pathname: \"/profile\",\n                            search: `user=${member.username}`,\n                          }}\n                        >\n                          @{member.username}\n                        </Link>\n\n                        <small className=\"d-block text-muted\">\n                          {member.email}\n                        </small>\n                      </div>\n                    </div>\n                  </ListGroup.Item>\n                ))}\n              </ListGroup>\n            )}\n          </>\n        }\n        subBtn={\"\"}\n        subHandler={null}\n      />\n    </>\n  );\n}\n\nexport default EventMembers;\n","import React, { useState, useRef } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { useDispatch } from \"react-redux\";\nimport { removeEvent } from \"../../actions/eventActions\";\nimport Loading from \"../SiteElements/loader\";\nimport ModalItem from \"./modal-item\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Delete } from \"../SiteElements/icons\";\n\nfunction RemoveEvent(props) {\n  const dispatch = useDispatch();\n  let navigate = useNavigate();\n  const ref = React.createRef();\n  const btnRef = useRef();\n  const [load, setLoad] = useState(false);\n  const [error, setError] = useState({});\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    dispatch(removeEvent(props.eventId, setLoad, setError, navigate));\n  };\n\n  return (\n    <>\n      <ModalItem\n        ref={(ref, btnRef)}\n        customBtn={\"\"}\n        btnIcon={\n          <div className=\"d-flex align-items-center\">\n            <Delete />\n            Delete\n          </div>\n        }\n        error={error}\n        title={\"Delete Event\"}\n        content={\n          <>\n            {\" \"}\n            Are you sure you want to delete <strong>{props.eventTitle}</strong>?\n            Any affiliations to this event will also be nullified.\n          </>\n        }\n        subBtn={\n          <>\n            <hr />\n            <Button\n              className=\"me-3 btn-cancel\"\n              onClick={() => btnRef.current.setModalShow(false)}\n            >\n              Back\n            </Button>\n            <Button\n              type=\"submit\"\n              onClick={() => btnRef.current.setModalShow(false)}\n            >\n              {(() => {\n                if (load) {\n                  return <Loading />;\n                } else {\n                  return <>Remove</>;\n                }\n              })()}\n            </Button>\n          </>\n        }\n        subHandler={handleSubmit}\n      />\n    </>\n  );\n}\n\nexport default RemoveEvent;\n","import React, { useState, useRef } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport { useDispatch } from \"react-redux\";\nimport { getSingleEvent, updateStatus } from \"../../actions/eventActions\";\nimport Loading from \"../SiteElements/loader\";\nimport ModalItem from \"./modal-item\";\nimport { useParams } from \"react-router-dom\";\nimport { emitter } from \"../client/socket\";\nimport { PencilSquare } from \"../SiteElements/icons\";\nimport { CANCELLED, FINISHED } from \"./utilities/types\";\nimport { EventMembersHandler } from \"./utilities/action-handlers\";\n\nfunction EventStatus(props) {\n  const dispatch = useDispatch();\n  const ref = React.createRef();\n  const btnRef = useRef();\n  const [status, setStatus] = useState(\"\");\n  const [load, setLoad] = useState(false);\n  const [error, setError] = useState({});\n\n  const params = useParams();\n\n  const eventMembers = EventMembersHandler(props.eventId);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const postData = {\n      status: status,\n    };\n\n    dispatch(updateStatus(props.eventId, postData, setLoad, setError)).then(\n      () => {\n        dispatch(getSingleEvent(params.id));\n        emitter(eventMembers.map((member) => member.username));\n      }\n    );\n  };\n  return (\n    <>\n      <ModalItem\n        ref={(ref, btnRef)}\n        customBtn={\"\"}\n        btnIcon={\n          <div className=\"d-flex align-items-center\">\n            <PencilSquare />\n            Status\n          </div>\n        }\n        error={error}\n        title={\"Update Status\"}\n        content={\n          <>\n            <Form.Group className=\"mb-3\">\n              <Form.Label className=\"m-1\">\n                Mark your event as <strong>FINISHED</strong> or{\" \"}\n                <strong>CANCELLED</strong>\n              </Form.Label>\n              <Form.Control\n                type=\"title\"\n                placeholder=\"Christmas social\"\n                pattern=\"(FINISHED|CANCELLED)\"\n                onChange={(e) =>\n                  setStatus(\n                    e.target.value === FINISHED\n                      ? 2\n                      : e.target.value === CANCELLED\n                      ? 3\n                      : \"\"\n                  )\n                }\n                required\n              />\n            </Form.Group>\n            <div className=\"mt-2\">\n              <small className=\"text-muted\">\n                Note: The event status can only be updated once.\n              </small>\n            </div>\n          </>\n        }\n        subBtn={\n          <div>\n            <hr />\n            <Button\n              className=\"me-3 btn-cancel\"\n              onClick={() => btnRef.current.setModalShow(false)}\n            >\n              Back\n            </Button>\n            <Button type=\"submit\">\n              {(() => {\n                if (load) {\n                  return <Loading />;\n                } else {\n                  return <>Update</>;\n                }\n              })()}\n            </Button>\n          </div>\n        }\n        subHandler={handleSubmit}\n      />\n    </>\n  );\n}\n\nexport default EventStatus;\n","import EventMembers from \"../event-members\";\nimport JoinEvent from \"../join-event\";\nimport RemoveEvent from \"../remove-event\";\nimport CTAButton from \"../../SiteElements/cta-button\";\nimport { Edit } from \"../../SiteElements/icons\";\nimport EventStatus from \"../event-status\";\n\nexport const eventOptions = (id, title, user, currUser, handleClick) => {\n  const options_owner = [\n    {\n      item: (\n        <div>\n          <CTAButton\n            type={\"\"}\n            btnStyle={\"postBtn-placements\"}\n            variant={\"primary\"}\n            onClick={handleClick}\n            placeholder={\n              <div className=\"d-flex align-items-center\">\n                <Edit />\n                Edit\n              </div>\n            }\n          />\n        </div>\n      ),\n    },\n    {\n      item: <EventStatus eventId={id} eventTitle={title} />,\n    },\n    {\n      item: <RemoveEvent eventId={id} eventTitle={title} />,\n    },\n\n    /* {\n      item: <EventMembers eventId={id} userId={user} currentUser={currUser} />,\n    }, */\n  ];\n\n  const options_user = [\n    {\n      item: <JoinEvent eventId={id} eventTitle={title} />,\n    },\n    {\n      item: <EventMembers eventId={id} userId={user} currentUser={currUser} />,\n    },\n  ];\n\n  return { options_owner, options_user };\n};\n","import React, { useState, useContext } from \"react\";\nimport { Button, ButtonGroup, Card, Dropdown } from \"react-bootstrap\";\nimport UpdateEvent from \"./update-event\";\nimport { eventOptions } from \"./utilities/event-options\";\nimport { Mention } from \"../Utilities/mention\";\nimport EventMembers from \"./event-members\";\nimport { RequestBtn, StatusBadge } from \"./utilities/event-builder\";\nimport { SingleEventContext } from \"../Dashboards/event-dash\";\nimport { SecurityContext } from \"../Context/security-context\";\nimport { Comment, Ellipse } from \"../SiteElements/icons\";\nimport { CANCELLED, FINISHED } from \"./utilities/types\";\n\nfunction EventItem(props) {\n  const [editorMode, setEditorMode] = useState(false);\n  const eventData = useContext(SingleEventContext);\n  const currentUser = useContext(SecurityContext);\n\n  function handleClick() {\n    setEditorMode(!editorMode);\n  }\n\n  return (\n    <>\n      {editorMode === false ? (\n        <Card className=\"event-card\">\n          <Card.Header>\n            <div className=\"d-flex justify-content-between\">\n              <img\n                src={eventData.gravatarImage}\n                className=\"userProf-img me-3\"\n                alt=\"Img\"\n              />\n              <StatusBadge joinedStatus={eventData.joinedStatus} />\n              {currentUser === eventData.user ? (\n                <Dropdown>\n                  <Dropdown.Toggle\n                    variant=\"light\"\n                    size=\"sm\"\n                    id=\"dropdown-basic\"\n                  >\n                    <Ellipse />\n                  </Dropdown.Toggle>\n                  <Dropdown.Menu>\n                    {eventOptions(\n                      eventData.id,\n                      eventData.title,\n                      eventData.user,\n                      currentUser,\n                      handleClick\n                    )\n                      .options_owner.slice(\n                        eventData.eventStatus === CANCELLED ||\n                          eventData.eventStatus === FINISHED\n                          ? (0, 2)\n                          : \"\"\n                      )\n                      .map((i, index) => {\n                        return (\n                          <div key={index} className=\"p-1\">\n                            {i.item}\n                          </div>\n                        );\n                      })}\n                  </Dropdown.Menu>\n                </Dropdown>\n              ) : (\n                \"\"\n              )}\n            </div>\n          </Card.Header>\n          <Card.Body>\n            <div className=\"details_textarea\">\n              <h4>{eventData.title}</h4>\n              <span\n                className=\"content_sm1\"\n                dangerouslySetInnerHTML={{\n                  __html: eventData.details\n                    ? Mention(eventData.details)\n                    : eventData.details,\n                }}\n              />\n            </div>\n            <div className=\"details_textarea\">\n              <h6>Details</h6>\n              <small className=\"text-muted\">\n                Host:{\" \"}\n                <a\n                  href={`/profile?user=${eventData.userName}`}\n                  className=\"text-decoration-none\"\n                >\n                  @{eventData.userName}\n                </a>\n              </small>\n              <br />\n              <small className=\"text-muted\">\n                Posted: {eventData.humanTimeDiffCreatedAt} ago\n              </small>\n              <br />\n              <small className=\"text-muted\">\n                Date: {eventData.eventDateString}{\" \"}\n              </small>\n\n              <div className=\"mt-4\">\n                <EventMembers\n                  eventId={eventData.id}\n                  userId={eventData.user}\n                  currentUser={currentUser}\n                  img={eventData.gravatarImage}\n                />\n              </div>\n            </div>\n            <ButtonGroup\n              aria-label=\"Basic example\"\n              className=\"mt-3 w-100 justify-content-between\"\n            >\n              <Button variant=\"light\" className=\"postBtn-placements cta_button\">\n                <span className=\"d-flex align-items-center fw-normal small text-muted\">\n                  <Comment />\n                  {props.commentCount}\n                </span>\n              </Button>\n              <RequestBtn\n                JoinEvent={eventData}\n                joinedStatus={eventData.joinedStatus}\n              />\n            </ButtonGroup>\n          </Card.Body>\n        </Card>\n      ) : (\n        <UpdateEvent\n          eventId={eventData.id}\n          title={eventData.title}\n          details={eventData.details}\n          maxMembers={eventData.maxMember}\n          cardStyle={currentUser === eventData.user ? \"editor-card\" : \"\"}\n          handleUpate={handleClick}\n        />\n      )}\n    </>\n  );\n}\n\nexport default EventItem;\n","import React, { useContext, useState } from \"react\";\nimport { Button, ButtonGroup, Card } from \"react-bootstrap\";\nimport { useDispatch } from \"react-redux\";\nimport { memberStatus } from \"../../actions/eventActions\";\nimport Loading from \"../SiteElements/loader\";\nimport { Link } from \"react-router-dom\";\nimport { emitter } from \"../client/socket\";\nimport { EventMembersHandler } from \"./utilities/action-handlers\";\nimport { Pending } from \"./utilities/event-builder\";\nimport { SingleEventContext } from \"../Dashboards/event-dash\";\nimport { Cross, Tick } from \"../SiteElements/icons\";\nimport { DisplayImage } from \"../SiteElements/user-displayimg\";\n\nfunction ManageMembers(props) {\n  const dispatch = useDispatch();\n  const eventData = useContext(SingleEventContext);\n\n  const [load, setLoad] = useState(false);\n  const eventMembers = EventMembersHandler(eventData.id);\n  const pendingMembers = Pending(eventMembers, props.currentUser);\n\n  const manageUser = async (status, memberId) => {\n    const postData = {\n      eventId: eventData.id,\n      userId: memberId,\n      status: status,\n    };\n\n    dispatch(memberStatus(postData, setLoad)).then(() => {\n      emitter(pendingMembers.map((member) => member.username));\n    });\n  };\n\n  return (\n    <Card className=\"event-card\">\n      <Card.Header>New requests</Card.Header>\n\n      <Card.Body>\n        {pendingMembers.length > 0\n          ? pendingMembers.map((member) => {\n              return (\n                <div\n                  key={member.id}\n                  className=\"d-flex userInfo-div  justify-content-between\"\n                  style={{ padding: \" 20px 10px 10px 20px\" }}\n                >\n                  <div className=\"d-flex align-items-center\">\n                    <DisplayImage image={member.gravatarImage} />\n\n                    <div className=\"ms-4\">\n                      <Link\n                        to={{\n                          pathname: \"/profile\",\n                          search: `user=${member.username}`,\n                        }}\n                      >\n                        @{member.username}\n                      </Link>\n\n                      <small className=\"d-block text-muted\">\n                        {member.email}\n                      </small>\n                    </div>\n                  </div>\n                  <div className=\"d-flex align-items-center\">\n                    <ButtonGroup\n                      aria-label=\"Basic example\"\n                      className=\"w-100 gap-1\"\n                    >\n                      <Button\n                        variant=\"light\"\n                        className=\"postBtn-placements cta_button\"\n                        onClick={() => manageUser(1, member.userId)}\n                      >\n                        {(() => {\n                          if (load) {\n                            return <Loading />;\n                          } else {\n                            return (\n                              <span className=\"d-flex align-items-center\">\n                                <Tick />\n                              </span>\n                            );\n                          }\n                        })()}\n                      </Button>\n                      <Button\n                        variant=\"light\"\n                        className=\"postBtn-placements cta_button\"\n                        onClick={() => manageUser(2, member.userId)}\n                      >\n                        {(() => {\n                          if (load) {\n                            return <Loading />;\n                          } else {\n                            return (\n                              <span className=\"d-flex align-items-center\">\n                                <Cross type=\"custom\" />\n                              </span>\n                            );\n                          }\n                        })()}\n                      </Button>\n                    </ButtonGroup>\n                  </div>\n                </div>\n              );\n            })\n          : \"No new requests..\"}\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default ManageMembers;\n","import React, { useState, useRef } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { useDispatch } from \"react-redux\";\nimport Loading from \"../SiteElements/loader\";\nimport ModalItem from \"../Event/modal-item\";\nimport { SearchParam } from \"../Utilities/search-param\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getAllComments, removeComment } from \"../../actions/commentActions\";\nimport { Delete } from \"../SiteElements/icons\";\n\nfunction RemoveComment(props) {\n  const dispatch = useDispatch();\n  let navigate = useNavigate();\n  const ref = React.createRef();\n  const btnRef = useRef();\n  const [load, setLoad] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  let pageId = SearchParam(props.commentCount);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    dispatch(removeComment(props.commentId, setLoad, setError)).then(() => {\n      dispatch(getAllComments(props.eventId, pageId));\n      navigate(`/event/${props.eventId}?page=${pageId}`, {\n        replace: true,\n        state: { id: pageId },\n      });\n    });\n  };\n\n  return (\n    <div>\n      <ModalItem\n        ref={(ref, btnRef)}\n        customBtn={\"\"}\n        btnIcon={\n          <div className=\"d-flex align-items-center\">\n            <Delete />\n            Delete\n          </div>\n        }\n        error={error}\n        title={\"Delete Comment\"}\n        content={\n          <>\n            {\" \"}\n            Are you sure you want to delete this comment? This can't be undone.\n          </>\n        }\n        subBtn={\n          <>\n            <hr />\n            <Button\n              className=\"me-3 btn-cancel\"\n              onClick={() => btnRef.current.setModalShow(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              onClick={() => btnRef.current.setModalShow(false)}\n            >\n              {(() => {\n                if (load) {\n                  return <Loading />;\n                } else {\n                  return <>Remove</>;\n                }\n              })()}\n            </Button>\n          </>\n        }\n        subHandler={handleSubmit}\n      />\n    </div>\n  );\n}\n\nexport default RemoveComment;\n","import RemoveComment from \"../remove-comment\";\nimport CTAButton from \"../../SiteElements/cta-button\";\nimport { Edit } from \"../../SiteElements/icons\";\n\nexport const commentOptions = (commentId, eventId, count, handleClick) => {\n  const options_owner = [\n    {\n      item: (\n        <div>\n          <CTAButton\n            type={\"\"}\n            btnStyle={\"postBtn-placements\"}\n            variant={\"primary\"}\n            onClick={handleClick}\n            placeholder={\n              <div className=\"d-flex align-items-center\">\n                <Edit />\n                Edit\n              </div>\n            }\n          />\n        </div>\n      ),\n    },\n    {\n      item: (\n        <RemoveComment\n          commentId={commentId}\n          eventId={eventId}\n          commentCount={count}\n        />\n      ),\n    },\n  ];\n\n  return { options_owner };\n};\n","import React, { useState } from \"react\";\nimport { Card, Form } from \"react-bootstrap\";\nimport { useDispatch } from \"react-redux\";\nimport CTAButton from \"../SiteElements/cta-button\";\nimport { getAllComments, updateComment } from \"../../actions/commentActions\";\nimport { SearchParam } from \"../Utilities/search-param\";\nimport { emitter } from \"../client/socket\";\nimport { MentionFilter } from \"../Utilities/mention\";\nimport { Cross, Submit } from \"../SiteElements/icons\";\n\nfunction UpdateComment(props, { handleUpate }) {\n  const dispatch = useDispatch();\n  const [content, setContent] = useState(props.content);\n\n  let pageId = SearchParam();\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const postData = {\n      content: content,\n    };\n\n    dispatch(updateComment(props.commentId, postData)).then(() => {\n      dispatch(getAllComments(props.eventId, pageId));\n      emitter(MentionFilter(content));\n    });\n    props.handleUpate();\n  };\n\n  return (\n    <Form\n      onSubmit={(e) => {\n        handleSubmit(e);\n      }}\n    >\n      <Card className={props.cardStyle}>\n        <Card.Header>\n          <h3 className=\"fw-bold m-0\">Edit comment</h3>\n        </Card.Header>\n        <Card.Body>\n          <Form.Control\n            spellCheck={true}\n            placeholder=\"What's on your mind?\"\n            as=\"textarea\"\n            value={content || \"\"}\n            onChange={(e) => setContent(e.target.value)}\n            required\n          />\n\n          <div className=\"d-flex justify-content-between mt-3\">\n            <CTAButton\n              type={\"\"}\n              btnStyle={\"postBtn-placements\"}\n              variant={\"primary\"}\n              onClick={props.handleUpate}\n              placeholder={\n                <div className=\"d-flex align-items-center\">\n                  <Cross />\n                  Cancel\n                </div>\n              }\n            />\n            <CTAButton\n              type={\"submit\"}\n              btnStyle={\"postBtn-placements cta_button\"}\n              variant={\"primary\"}\n              formValidation={content === \"\" ? true : false}\n              isLoading={\"\"}\n              placeholder={\n                <div className=\"d-flex align-items-center\">\n                  <Submit />\n                  Update\n                </div>\n              }\n            />\n          </div>\n        </Card.Body>\n      </Card>{\" \"}\n    </Form>\n  );\n}\n\nexport default UpdateComment;\n","import { Like } from \"../../SiteElements/icons\";\n\nexport const CommentReacts = (props) => {\n  const reactCount = props.commentData.totalLikes;\n  const isReacted = props.commentData.likeStatus;\n\n  var status =\n    isReacted && reactCount > 2\n      ? `Liked by you and ${reactCount - 1} others`\n      : isReacted && reactCount === 1\n      ? `You liked this`\n      : (!isReacted && reactCount > 1) || (isReacted && reactCount === 2)\n      ? `${reactCount} likes`\n      : !isReacted && reactCount === 1\n      ? `${reactCount} like`\n      : \"Like\";\n\n  return (\n    <span className=\"d-flex align-items-center fw-normal small text-muted\">\n      <Like likeStatus={props.commentData.likeStatus} />\n      {status}\n    </span>\n  );\n};\n","import React, { useState, useContext } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Button, ButtonGroup, Card, Dropdown } from \"react-bootstrap\";\nimport { Mention } from \"../Utilities/mention\";\nimport { commentOptions } from \"./utilities/comment-options\";\nimport UpdateComment from \"./update-comment\";\nimport { getAllComments, likeUnlike } from \"../../actions/commentActions\";\nimport { SearchParam } from \"../Utilities/search-param\";\nimport PopoverItem from \"../Profile/popover-item\";\nimport { CommentReacts } from \"./utilities/comment-builder\";\nimport { SingleEventContext } from \"../Dashboards/event-dash\";\nimport { SecurityContext } from \"../Context/security-context\";\nimport { Ellipse } from \"../SiteElements/icons\";\nimport { emitter } from \"../client/socket\";\n\nfunction CommentItem(props) {\n  const dispatch = useDispatch();\n\n  const [editorMode, setEditorMode] = useState(false);\n  const eventData = useContext(SingleEventContext);\n  const currentUser = useContext(SecurityContext);\n\n  let pageId = SearchParam();\n\n  function handleClick() {\n    setEditorMode(!editorMode);\n  }\n\n  const commentReact = () => {\n    dispatch(likeUnlike(props.commentData.id)).then(() => {\n      dispatch(getAllComments(eventData.id, pageId));\n      emitter([props.commentData.username]);\n    });\n  };\n\n  return (\n    <>\n      {!editorMode ? (\n        <Card className=\"event-card\">\n          <Card.Header>\n            <div className=\"d-flex\">\n              <img\n                src={props.commentData.gravatarImage}\n                className=\"userProf-img me-3\"\n                alt=\"Img\"\n              />\n\n              <div className=\"me-auto\">\n                <h6 className=\"m-0\"> {props.commentData.username}</h6>\n                <small\n                  className=\"text-muted\"\n                  style={{ fontSize: \"12px\", display: \"block\" }}\n                >\n                  <PopoverItem data={props.commentData.username} />\n\n                  <strong>\n                    {\" \"}\n                    {props.commentData.humanTimeDiffCreatedAt} ago\n                  </strong>\n                </small>\n              </div>\n\n              {currentUser === props.commentData.user ? (\n                <Dropdown>\n                  <Dropdown.Toggle\n                    variant=\"light\"\n                    size=\"sm\"\n                    id=\"dropdown-basic\"\n                  >\n                    <Ellipse />\n                  </Dropdown.Toggle>\n                  <Dropdown.Menu>\n                    {commentOptions(\n                      props.commentData.id,\n                      eventData.id,\n                      props.commentCount,\n                      handleClick\n                    ).options_owner.map((i, index) => {\n                      return (\n                        <div key={index} className=\"p-1\">\n                          {i.item}\n                        </div>\n                      );\n                    })}\n                  </Dropdown.Menu>\n                </Dropdown>\n              ) : (\n                \"\"\n              )}\n            </div>\n          </Card.Header>\n          <Card.Body>\n            <Card.Text\n              className=\"details_textarea content_sm1\"\n              dangerouslySetInnerHTML={{\n                __html: props.commentData.content\n                  ? Mention(props.commentData.content)\n                  : props.commentData.content,\n              }}\n            />\n\n            <ButtonGroup\n              aria-label=\"Basic example\"\n              className=\"mt-3 w-100 gap-2\"\n            >\n              <Button\n                variant=\"light\"\n                className=\"postBtn-placements cta_button\"\n                onClick={() => {\n                  commentReact();\n                }}\n              >\n                <CommentReacts commentData={props.commentData} />\n              </Button>\n            </ButtonGroup>\n          </Card.Body>\n        </Card>\n      ) : (\n        <UpdateComment\n          eventId={eventData.id}\n          commentId={props.commentData.id}\n          content={props.commentData.content}\n          cardStyle={currentUser === eventData.user ? \"editor-card\" : \"\"}\n          handleUpate={handleClick}\n        />\n      )}\n    </>\n  );\n}\n\nexport default CommentItem;\n","import React, { useContext, useEffect, useRef, useState } from \"react\";\nimport { Card, Form } from \"react-bootstrap\";\nimport { useDispatch } from \"react-redux\";\nimport { createComment, getAllComments } from \"../../actions/commentActions\";\nimport { emitter } from \"../client/socket\";\nimport { SingleEventContext } from \"../Dashboards/event-dash\";\nimport CTAButton from \"../SiteElements/cta-button\";\nimport { Submit } from \"../SiteElements/icons\";\nimport { MentionFilter } from \"../Utilities/mention\";\nimport { SearchParam } from \"../Utilities/search-param\";\n\nfunction CreateComment(props) {\n  const dispatch = useDispatch();\n  const formRef = useRef(0);\n  const [content, setContent] = useState(\"\");\n  const [load, setLoad] = useState(false);\n  const [validateFormEmpty, setValidateFormEmpty] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const eventData = useContext(SingleEventContext);\n\n  let pageId = SearchParam();\n\n  useEffect(() => {\n    if (content === \"\") {\n      setValidateFormEmpty(true);\n    } else {\n      setValidateFormEmpty(false);\n    }\n  }, [content]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const postData = {\n      content: content,\n    };\n    dispatch(createComment(props.id, postData, setLoad, setError)).then(() => {\n      dispatch(getAllComments(props.id, pageId));\n      emitter(MentionFilter(content, eventData.userName));\n    });\n  };\n\n  useEffect(() => {\n    if (error === 200) {\n      formRef.current.reset();\n      setContent(\"\");\n      setError(\"\");\n    }\n  }, [error]);\n  return (\n    <>\n      <Card className=\"comment-card\">\n        <Card.Body>\n          <Form\n            onSubmit={(e) => {\n              handleSubmit(e);\n            }}\n            ref={formRef}\n          >\n            <Form.Control\n              spellCheck={true}\n              placeholder=\"Add a comment...\"\n              as=\"textarea\"\n              onChange={(e) => setContent(e.target.value)}\n              rows={2}\n              required\n            />\n\n            <div className=\"d-flex justify-content-between mt-3\">\n              <small className=\"text-danger\">{error}</small>\n              <CTAButton\n                type={\"submit\"}\n                btnStyle={\"formBtn cta_button\"}\n                variant={\"primary\"}\n                formValidation={validateFormEmpty}\n                isLoading={load}\n                placeholder={\n                  <div className=\"d-flex align-items-center\">\n                    <Submit />\n                    Send\n                  </div>\n                }\n              />\n            </div>\n          </Form>\n        </Card.Body>\n      </Card>\n    </>\n  );\n}\n\nexport default CreateComment;\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport Anchor from '@restart/ui/Anchor';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  active: false,\n  linkProps: {}\n};\nconst BreadcrumbItem = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  active,\n  children,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'li',\n  linkAs: LinkComponent = Anchor,\n  linkProps,\n  href,\n  title,\n  target,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'breadcrumb-item');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(prefix, className, {\n      active\n    }),\n    \"aria-current\": active ? 'page' : undefined,\n    children: active ? children : /*#__PURE__*/_jsx(LinkComponent, { ...linkProps,\n      href: href,\n      title: title,\n      target: target,\n      children: children\n    })\n  });\n});\nBreadcrumbItem.displayName = 'BreadcrumbItem';\nBreadcrumbItem.defaultProps = defaultProps;\nexport default BreadcrumbItem;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport BreadcrumbItem from './BreadcrumbItem';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  label: 'breadcrumb',\n  listProps: {}\n};\nconst Breadcrumb = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  listProps,\n  children,\n  label,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'nav',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'breadcrumb');\n  return /*#__PURE__*/_jsx(Component, {\n    \"aria-label\": label,\n    className: className,\n    ref: ref,\n    ...props,\n    children: /*#__PURE__*/_jsx(\"ol\", { ...listProps,\n      className: classNames(prefix, listProps == null ? void 0 : listProps.className),\n      children: children\n    })\n  });\n});\nBreadcrumb.displayName = 'Breadcrumb';\nBreadcrumb.defaultProps = defaultProps;\nexport default Object.assign(Breadcrumb, {\n  Item: BreadcrumbItem\n});","import React from \"react\";\nimport { Breadcrumb } from \"react-bootstrap\";\n\nfunction Breadcrumbs(props) {\n  return (\n    <>\n      {props.items ? (\n        <Breadcrumb>\n          {props.items.map((item, index) => {\n            return (\n              <Breadcrumb.Item\n                key={index}\n                href={item.path}\n                active={item.current}\n              >\n                {item.title}\n              </Breadcrumb.Item>\n            );\n          })}\n        </Breadcrumb>\n      ) : (\n        \"\"\n      )}\n    </>\n  );\n}\n\nexport default Breadcrumbs;\n","import { Card } from \"react-bootstrap\";\n\nexport const InfoCard = (props) => {\n  return (\n    <Card style={props.cardStyle}>\n      <Card.Body>\n        <Card.Title className=\"d-inline-flex align-items-center\">\n          {props.icon} {props.title}\n        </Card.Title>\n\n        <Card.Text className=\"content_sm1\">{props.content}</Card.Text>\n      </Card.Body>\n    </Card>\n  );\n};\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { Card, Container } from \"react-bootstrap\";\nimport { useLocation, useParams, useSearchParams } from \"react-router-dom\";\nimport EventItem from \"../Event/event-item\";\nimport ManageMembers from \"../Event/manage-members\";\nimport CommentItem from \"../Comments/comment-item\";\nimport CreateComment from \"../Comments/create-comment\";\nimport { SearchParam } from \"../Utilities/search-param\";\nimport Pagination from \"../SiteElements/pagination\";\nimport Breadcrumbs from \"../SiteElements/breadcrumbs\";\nimport { ACCEPTED, CANCELLED, FINISHED, OWNER } from \"../Event/utilities/types\";\nimport { SingleEventHandler } from \"../Event/utilities/action-handlers\";\nimport { SecurityContext } from \"../Context/security-context\";\nimport { BadgeItem } from \"../Event/utilities/event-builder\";\nimport { Information } from \"../SiteElements/icons\";\nimport { InfoCard } from \"../SiteElements/info-cards\";\n\nexport const SingleEventContext = createContext();\n\nfunction EventDash() {\n  const params = useParams();\n  let pageId = SearchParam();\n\n  const eventData = SingleEventHandler(params, pageId).eventData;\n  const commentData = SingleEventHandler(params, pageId).commentData;\n  const currentUser = useContext(SecurityContext);\n\n  //pagination\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postPerPage] = useState(10);\n  // eslint-disable-next-line no-unused-vars\n  const [searchParams, setSearchParams] = useSearchParams({});\n  const { state } = useLocation();\n\n  //pagination\n  useEffect(() => {\n    if (state) {\n      const { id } = state;\n      setCurrentPage(id);\n    }\n  }, [state]);\n\n  useEffect(() => {\n    setSearchParams({ page: currentPage });\n  }, [setSearchParams, currentPage]);\n\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\n\n  //breadcrumbs\n  const breadcrumbItem = eventData\n    ? [\n        { title: \"Dashboard\", path: \"/posts\", current: false },\n        {\n          title: eventData.title,\n          path: `/event/${eventData.id}`,\n          current: true,\n        },\n      ]\n    : \"\";\n\n  return (\n    <>\n      <SingleEventContext.Provider value={eventData}>\n        {eventData ? (\n          <div style={{ position: \"relative\" }}>\n            <div className=\"dash-container\">\n              <div className=\"content\">\n                <Container>\n                  <Breadcrumbs items={breadcrumbItem} />\n                  {eventData.joinedStatus === OWNER ||\n                  eventData.joinedStatus === ACCEPTED ? (\n                    <CreateComment id={params.id} />\n                  ) : (\n                    <Card className=\"event-card\">\n                      <Card.Body>\n                        <Card.Text>\n                          You will be able collaborate with others via comments\n                          once you are accepted.\n                        </Card.Text>\n                      </Card.Body>\n                    </Card>\n                  )}\n\n                  {commentData.results\n                    ? commentData.results.map((comment, index) => {\n                        return (\n                          <div key={index}>\n                            <CommentItem\n                              commentData={comment}\n                              commentCount={commentData.count}\n                            />\n                          </div>\n                        );\n                      })\n                    : \"\"}\n                  {commentData.count > 10 ? (\n                    <Pagination\n                      postsPerPage={postPerPage}\n                      totalPosts={commentData.count}\n                      paginate={paginate}\n                      currentPage={currentPage}\n                    />\n                  ) : (\n                    \"\"\n                  )}\n                </Container>\n              </div>\n\n              <div className=\"sidebar_eventDash\">\n                <div className=\"sidebar-wrapper\">\n                  <Container>\n                    {eventData.eventStatus === CANCELLED ||\n                    eventData.eventStatus === FINISHED ? (\n                      <InfoCard\n                        title=\"Note\"\n                        content={\n                          <>\n                            This event now has{\" \"}\n                            <BadgeItem eventStatus={eventData.eventStatus} />{\" \"}\n                            therefore it can not be updated or particapated in.\n                          </>\n                        }\n                        icon={<Information />}\n                        cardStyle={{ backgroundColor: \"#eaebfd\" }}\n                      />\n                    ) : (\n                      \"\"\n                    )}\n\n                    <EventItem commentCount={commentData.count} />\n                    {currentUser === eventData.user &&\n                    eventData.eventStatus !== CANCELLED &&\n                    eventData.eventStatus !== FINISHED ? (\n                      <ManageMembers currentUser={currentUser} />\n                    ) : (\n                      \"\"\n                    )}\n                  </Container>\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          \"\"\n        )}\n      </SingleEventContext.Provider>\n    </>\n  );\n}\n\nexport default EventDash;\n"],"names":["props","handleUpate","dispatch","useDispatch","params","useParams","useState","title","setTitle","maxMembers","setMaxMembers","details","setDetails","handleSubmit","e","preventDefault","postData","maxMember","updateEvent","eventId","then","getSingleEvent","id","emitter","MentionFilter","Form","onSubmit","Card","className","cardStyle","type","placeholder","value","onChange","target","required","parseInt","min","spellCheck","as","btnStyle","variant","onClick","formValidation","isLoading","ref","React","eventMembers","EventMembersHandler","acceptedMembers","Accepted","customBtn","btnIcon","slice","map","member","src","gravatarImage","alt","length","error","content","ListGroup","image","to","pathname","search","username","email","subBtn","subHandler","navigate","useNavigate","btnRef","useRef","load","setLoad","setError","removeEvent","eventTitle","Button","current","setModalShow","status","setStatus","updateStatus","pattern","FINISHED","CANCELLED","eventOptions","user","currUser","handleClick","options_owner","item","options_user","userId","currentUser","editorMode","setEditorMode","eventData","useContext","SingleEventContext","SecurityContext","joinedStatus","Dropdown","size","eventStatus","i","index","dangerouslySetInnerHTML","__html","Mention","href","userName","humanTimeDiffCreatedAt","eventDateString","img","ButtonGroup","commentCount","JoinEvent","pendingMembers","Pending","manageUser","memberId","memberStatus","style","padding","pageId","SearchParam","removeComment","commentId","getAllComments","replace","state","commentOptions","count","setContent","updateComment","CommentReacts","reactCount","commentData","totalLikes","isReacted","likeStatus","fontSize","display","data","likeUnlike","formRef","validateFormEmpty","setValidateFormEmpty","useEffect","createComment","reset","rows","BreadcrumbItem","bsPrefix","active","children","Component","linkAs","LinkComponent","Anchor","linkProps","prefix","useBootstrapPrefix","_jsx","classNames","undefined","displayName","defaultProps","Breadcrumb","listProps","label","Object","assign","Item","items","path","InfoCard","icon","createContext","SingleEventHandler","currentPage","setCurrentPage","postPerPage","useSearchParams","setSearchParams","useLocation","page","breadcrumbItem","Provider","position","Container","OWNER","ACCEPTED","results","comment","postsPerPage","totalPosts","paginate","pageNumber","backgroundColor"],"sourceRoot":""}