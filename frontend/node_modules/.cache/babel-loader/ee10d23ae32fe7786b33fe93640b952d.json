{"ast":null,"code":"import axios from \"axios\";\nimport { isExpired } from \"react-jwt\";\nimport { SET_CURRENT_USER, GET_ERRORS } from \"./actions/types\";\nimport jwt_decode from \"jwt-decode\";\nimport store from \"./store\";\n\nconst setToken = token => {\n  const isMyTokenExpired = isExpired(token);\n\n  if (token && isMyTokenExpired) {\n    const refToken = {\n      refresh: localStorage.token\n    };\n    const res = axios.post(\"http://localhost:8000/api/auth/token/refresh/\", refToken);\n    const decoded_token = jwt_decode(res.data.access);\n    store.dispatch({\n      type: SET_CURRENT_USER,\n      payload: decoded_token\n    });\n    axios.defaults.headers.common[\"Authorization\"] = \"Bearer \" + res.data.access;\n  } else if (token && !isMyTokenExpired) {\n    axios.defaults.headers.common[\"Authorization\"] = \"Bearer \" + token;\n  } else {\n    delete axios.defaults.headers.common[\"Authorization\"];\n  }\n};\n\nexport default setToken;","map":{"version":3,"sources":["/Users/mananlodhia/Desktop/Projects/EventMatcher/frontend/frontend/src/securityUtils/setToken.js"],"names":["axios","isExpired","SET_CURRENT_USER","GET_ERRORS","jwt_decode","store","setToken","token","isMyTokenExpired","refToken","refresh","localStorage","res","post","decoded_token","data","access","dispatch","type","payload","defaults","headers","common"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,SAASC,gBAAT,EAA2BC,UAA3B,QAA6C,iBAA7C;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAIA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAC1B,QAAMC,gBAAgB,GAAGP,SAAS,CAACM,KAAD,CAAlC;;AAEA,MAAIA,KAAK,IAAIC,gBAAb,EAA+B;AAC7B,UAAMC,QAAQ,GAAG;AACfC,MAAAA,OAAO,EAAEC,YAAY,CAACJ;AADP,KAAjB;AAGA,UAAMK,GAAG,GAAGZ,KAAK,CAACa,IAAN,CACV,+CADU,EAEVJ,QAFU,CAAZ;AAKA,UAAMK,aAAa,GAAGV,UAAU,CAACQ,GAAG,CAACG,IAAJ,CAASC,MAAV,CAAhC;AACFX,IAAAA,KAAK,CAACY,QAAN,CAAe;AACbC,MAAAA,IAAI,EAAEhB,gBADO;AAEbiB,MAAAA,OAAO,EAAEL;AAFI,KAAf;AAKEd,IAAAA,KAAK,CAACoB,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IACE,YAAYV,GAAG,CAACG,IAAJ,CAASC,MADvB;AAED,GAjBD,MAiBO,IAAIT,KAAK,IAAI,CAACC,gBAAd,EAAgC;AACrCR,IAAAA,KAAK,CAACoB,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAiD,YAAYf,KAA7D;AACD,GAFM,MAEA;AACL,WAAOP,KAAK,CAACoB,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,CAAP;AACD;AACF,CAzBD;;AA2BA,eAAehB,QAAf","sourcesContent":["import axios from \"axios\";\nimport { isExpired } from \"react-jwt\";\nimport { SET_CURRENT_USER, GET_ERRORS } from \"./actions/types\";\nimport jwt_decode from \"jwt-decode\";\nimport store from \"./store\";\n\n\n\nconst setToken = (token) => {\n  const isMyTokenExpired = isExpired(token);\n\n  if (token && isMyTokenExpired) {\n    const refToken = {\n      refresh: localStorage.token,\n    };\n    const res = axios.post(\n      \"http://localhost:8000/api/auth/token/refresh/\",\n      refToken\n    );\n\n    const decoded_token = jwt_decode(res.data.access);\n  store.dispatch({\n    type: SET_CURRENT_USER,\n    payload: decoded_token,\n  });\n\n    axios.defaults.headers.common[\"Authorization\"] =\n      \"Bearer \" + res.data.access;\n  } else if (token && !isMyTokenExpired) {\n    axios.defaults.headers.common[\"Authorization\"] = \"Bearer \" + token;\n  } else {\n    delete axios.defaults.headers.common[\"Authorization\"];\n  }\n};\n\nexport default setToken;\n"]},"metadata":{},"sourceType":"module"}