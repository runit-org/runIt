{"ast":null,"code":"import axios from \"axios\";\nimport { GET_USERS, GET_ERRORS, SET_CURRENT_USER } from \"./types\";\nimport setToken from \"../securityUtils/setToken\";\nimport jwt_decode from \"jwt-decode\";\nexport const getUsers = () => async dispatch => {\n  const res = await axios.get(`http://localhost:8000/api/user/all/`); // console.log(res)\n\n  dispatch({\n    type: GET_USERS,\n    payload: res.data\n  });\n};\nexport const login = (LoginRequest, navigate, setLoad, show, setError) => async dispatch => {\n  try {\n    //post => login request\n    setLoad(true);\n    const res = await axios.post(\"http://localhost:8000/api/auth/login/\", LoginRequest); // console.log(res);\n    //extract token from data\n\n    const token = res.data.access; //store token in local storage\n\n    localStorage.setItem(\"token\", token); //set token in header\n\n    setToken(token); //get data from response\n\n    const decoded = {\n      username: res.data.username\n    };\n    localStorage.setItem(\"username\", decoded.username);\n\n    if (localStorage.getItem(\"token\")) {\n      navigate(\"/posts\");\n    } //dispatch to securityReducer\n\n\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n    dispatch({\n      type: SET_CURRENT_USER,\n      payload: decoded\n    });\n  } catch (error) {\n    setLoad(false);\n    show;\n    setError(error.response.data.detail);\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.response.data\n    }); // alert(error.response.data.detail)\n  }\n};\n/* export const logout = (navigate) => async (dispatch) => {\n  const res = await axios.get(\"http://localhost:8000/api/auth/logout\");\n  localStorage.clear();\n  setToken(false);\n  if (!localStorage.getItem(\"token\")) {\n    navigate(\"/signin\");\n  }\n  dispatch({\n    type: SET_CURRENT_USER,\n    payload: null,\n  });\n}; */\n\n/* export const getUser = () => async (dispatch) => {\n  const res = await axios.get(`http://localhost:8000/api/user/`);\n  dispatch({\n    type: GET_USER,\n    payload: res.data,\n  });\n}; */","map":{"version":3,"sources":["/Users/mananlodhia/Desktop/Projects/EventMatcher/frontend/frontend/src/actions/securityActions.js"],"names":["axios","GET_USERS","GET_ERRORS","SET_CURRENT_USER","setToken","jwt_decode","getUsers","dispatch","res","get","type","payload","data","login","LoginRequest","navigate","setLoad","show","setError","post","token","access","localStorage","setItem","decoded","username","getItem","error","response","detail"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,UAApB,EAAgCC,gBAAhC,QAAuD,SAAvD;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAChD,QAAMC,GAAG,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAW,qCAAX,CAAlB,CADgD,CAEhD;;AACAF,EAAAA,QAAQ,CAAC;AACPG,IAAAA,IAAI,EAAET,SADC;AAEPU,IAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,GAAD,CAAR;AAID,CAPM;AASP,OAAO,MAAMC,KAAK,GAAG,CAACC,YAAD,EAAeC,QAAf,EAAyBC,OAAzB,EAAkCC,IAAlC,EAAwCC,QAAxC,KAAqD,MAAOX,QAAP,IAAoB;AAC5F,MAAI;AACF;AACAS,IAAAA,OAAO,CAAC,IAAD,CAAP;AACA,UAAMR,GAAG,GAAG,MAAMR,KAAK,CAACmB,IAAN,CAChB,uCADgB,EAEhBL,YAFgB,CAAlB,CAHE,CAOF;AAEA;;AACA,UAAMM,KAAK,GAAGZ,GAAG,CAACI,IAAJ,CAASS,MAAvB,CAVE,CAWF;;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BH,KAA9B,EAZE,CAaF;;AACAhB,IAAAA,QAAQ,CAACgB,KAAD,CAAR,CAdE,CAeF;;AACA,UAAMI,OAAO,GAAG;AACdC,MAAAA,QAAQ,EAAEjB,GAAG,CAACI,IAAJ,CAASa;AADL,KAAhB;AAIAH,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,OAAO,CAACC,QAAzC;;AACA,QAAIH,YAAY,CAACI,OAAb,CAAqB,OAArB,CAAJ,EAAmC;AACjCX,MAAAA,QAAQ,CAAC,QAAD,CAAR;AACD,KAvBC,CAyBF;;;AACAR,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAER,UADC;AAEPS,MAAAA,OAAO,EAAE;AAFF,KAAD,CAAR;AAIAJ,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEP,gBADC;AAEPQ,MAAAA,OAAO,EAAEa;AAFF,KAAD,CAAR;AAID,GAlCD,CAkCE,OAAOG,KAAP,EAAc;AACdX,IAAAA,OAAO,CAAC,KAAD,CAAP;AACAC,IAAAA,IAAI;AACJC,IAAAA,QAAQ,CAACS,KAAK,CAACC,QAAN,CAAehB,IAAf,CAAoBiB,MAArB,CAAR;AACAtB,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAER,UADC;AAEPS,MAAAA,OAAO,EAAEgB,KAAK,CAACC,QAAN,CAAehB;AAFjB,KAAD,CAAR,CAJc,CAQd;AACD;AACF,CA7CM;AA+CP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import axios from \"axios\";\nimport { GET_USERS, GET_ERRORS, SET_CURRENT_USER} from \"./types\";\nimport setToken from \"../securityUtils/setToken\";\nimport jwt_decode from \"jwt-decode\";\n\nexport const getUsers = () => async (dispatch) => {\n  const res = await axios.get(`http://localhost:8000/api/user/all/`);\n  // console.log(res)\n  dispatch({\n    type: GET_USERS,\n    payload: res.data,\n  });\n};\n\nexport const login = (LoginRequest, navigate, setLoad, show, setError) => async (dispatch) => {\n  try {\n    //post => login request\n    setLoad(true);\n    const res = await axios.post(\n      \"http://localhost:8000/api/auth/login/\",\n      LoginRequest\n    );\n    // console.log(res);\n\n    //extract token from data\n    const token = res.data.access;\n    //store token in local storage\n    localStorage.setItem(\"token\", token);\n    //set token in header\n    setToken(token);\n    //get data from response\n    const decoded = {\n      username: res.data.username,\n    };\n\n    localStorage.setItem(\"username\", decoded.username);\n    if (localStorage.getItem(\"token\")) {\n      navigate(\"/posts\");\n    }\n\n    //dispatch to securityReducer\n    dispatch({\n      type: GET_ERRORS,\n      payload: {},\n    });\n    dispatch({\n      type: SET_CURRENT_USER,\n      payload: decoded,\n    });\n  } catch (error) {\n    setLoad(false);\n    show;\n    setError(error.response.data.detail);\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.response.data,\n    });\n    // alert(error.response.data.detail)\n  }\n};\n\n/* export const logout = (navigate) => async (dispatch) => {\n  const res = await axios.get(\"http://localhost:8000/api/auth/logout\");\n  localStorage.clear();\n  setToken(false);\n  if (!localStorage.getItem(\"token\")) {\n    navigate(\"/signin\");\n  }\n  dispatch({\n    type: SET_CURRENT_USER,\n    payload: null,\n  });\n}; */\n\n/* export const getUser = () => async (dispatch) => {\n  const res = await axios.get(`http://localhost:8000/api/user/`);\n  dispatch({\n    type: GET_USER,\n    payload: res.data,\n  });\n}; */\n"]},"metadata":{},"sourceType":"module"}