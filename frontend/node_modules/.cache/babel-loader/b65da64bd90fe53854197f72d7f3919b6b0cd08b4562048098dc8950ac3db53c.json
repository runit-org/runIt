{"ast":null,"code":"import axios from \"axios\";\nimport { GET_ALL_COMMENTS, GET_ERRORS } from \"./types\";\nimport { setToken, refreshToken } from \"../securityUtils/setToken\";\nexport const createComment = (id, postData, setLoad, setError) => async dispatch => {\n  await refreshToken().then(ref => {\n    setToken(ref.data.access);\n    setLoad(true);\n    axios.post(`http://localhost:8000/api/event/comment/create/${id}/`, postData).then(res => {\n      if (res.status === 200) {\n        setLoad(false);\n        setError(res.status);\n      }\n      dispatch({\n        type: GET_ERRORS,\n        payload: res.data\n      });\n    }).catch(error => {\n      setLoad(false);\n      setError(error.response.data.message);\n      dispatch({\n        type: GET_ERRORS,\n        payload: error.response.data\n      });\n    });\n  });\n};\nexport const removeComment = (id, setLoad, setError) => async dispatch => {\n  await refreshToken().then(ref => {\n    setToken(ref.data.access);\n    setLoad(true);\n    axios.delete(`http://localhost:8000/api/event/comment/delete/${id}/`).then(res => {\n      if (res.status === 200) {\n        setLoad(false);\n        setError(res.data.message);\n      }\n      dispatch({\n        type: GET_ERRORS,\n        payload: res.data\n      });\n    }).catch(error => {\n      setLoad(false);\n      setError(error.response.data.message);\n      dispatch({\n        type: GET_ERRORS,\n        payload: error.response\n      });\n    });\n  });\n};\nexport const updateComment = (id, postData) => async dispatch => {\n  await refreshToken().then(ref => {\n    setToken(ref.data.access);\n    axios.put(`http://localhost:8000/api/event/comment/update/${id}/`, postData).then(res => {\n      dispatch({\n        type: GET_ERRORS,\n        payload: res.data\n      });\n    }).catch(error => {\n      dispatch({\n        type: GET_ERRORS,\n        payload: error.response.data\n      });\n    });\n  });\n};\nexport const getAllComments = (id, page) => async dispatch => {\n  await refreshToken().then(ref => {\n    setToken(ref.data.access);\n    axios.get(`http://localhost:8000/api/event/comment/show/${id}/?page=${page}`).then(res => {\n      dispatch({\n        type: GET_ALL_COMMENTS,\n        payload: res.data\n      });\n    }).catch(error => {\n      dispatch({\n        type: GET_ERRORS,\n        payload: error.response.data\n      });\n    });\n  });\n};\nexport const likeUnlike = id => async dispatch => {\n  await refreshToken().then(ref => {\n    setToken(ref.data.access);\n    axios.post(`http://localhost:8000/api/event/comment/likeUnlike/${id}/`).then(res => {\n      // console.log(res);\n    }).catch(error => {\n      dispatch({\n        type: GET_ERRORS,\n        payload: error.response.data\n      });\n    });\n  });\n};","map":{"version":3,"names":["axios","GET_ALL_COMMENTS","GET_ERRORS","setToken","refreshToken","createComment","id","postData","setLoad","setError","dispatch","then","ref","data","access","post","res","status","type","payload","catch","error","response","message","removeComment","delete","updateComment","put","getAllComments","page","get","likeUnlike"],"sources":["/Users/Manan/Desktop/runIt/frontend/src/actions/commentActions.js"],"sourcesContent":["import axios from \"axios\";\nimport { GET_ALL_COMMENTS, GET_ERRORS } from \"./types\";\nimport { setToken, refreshToken } from \"../securityUtils/setToken\";\n\nexport const createComment =\n  (id, postData, setLoad, setError) => async (dispatch) => {\n    await refreshToken().then((ref) => {\n      setToken(ref.data.access);\n\n      setLoad(true);\n      axios\n        .post(`http://localhost:8000/api/event/comment/create/${id}/`, postData)\n        .then((res) => {\n          if (res.status === 200) {\n            setLoad(false);\n            setError(res.status);\n          }\n          dispatch({\n            type: GET_ERRORS,\n            payload: res.data,\n          });\n        })\n        .catch((error) => {\n          setLoad(false);\n          setError(error.response.data.message);\n          dispatch({\n            type: GET_ERRORS,\n            payload: error.response.data,\n          });\n        });\n    });\n  };\n\nexport const removeComment = (id, setLoad, setError) => async (dispatch) => {\n  await refreshToken().then((ref) => {\n    setToken(ref.data.access);\n\n    setLoad(true);\n    axios\n      .delete(`http://localhost:8000/api/event/comment/delete/${id}/`)\n      .then((res) => {\n        if (res.status === 200) {\n          setLoad(false);\n          setError(res.data.message);\n        }\n        dispatch({\n          type: GET_ERRORS,\n          payload: res.data,\n        });\n      })\n      .catch((error) => {\n        setLoad(false);\n        setError(error.response.data.message);\n        dispatch({\n          type: GET_ERRORS,\n          payload: error.response,\n        });\n      });\n  });\n};\n\nexport const updateComment = (id, postData) => async (dispatch) => {\n  await refreshToken().then((ref) => {\n    setToken(ref.data.access);\n\n    axios\n      .put(`http://localhost:8000/api/event/comment/update/${id}/`, postData)\n      .then((res) => {\n        dispatch({\n          type: GET_ERRORS,\n          payload: res.data,\n        });\n      })\n      .catch((error) => {\n        dispatch({\n          type: GET_ERRORS,\n          payload: error.response.data,\n        });\n      });\n  });\n};\n\nexport const getAllComments = (id, page) => async (dispatch) => {\n  await refreshToken().then((ref) => {\n    setToken(ref.data.access);\n    axios\n      .get(`http://localhost:8000/api/event/comment/show/${id}/?page=${page}`)\n      .then((res) => {\n        dispatch({\n          type: GET_ALL_COMMENTS,\n          payload: res.data,\n        });\n      })\n      .catch((error) => {\n        dispatch({\n          type: GET_ERRORS,\n          payload: error.response.data,\n        });\n      });\n  });\n};\n\nexport const likeUnlike = (id) => async (dispatch) => {\n  await refreshToken().then((ref) => {\n    setToken(ref.data.access);\n    axios\n      .post(`http://localhost:8000/api/event/comment/likeUnlike/${id}/`)\n      .then((res) => {\n        // console.log(res);\n      })\n      .catch((error) => {\n        dispatch({\n          type: GET_ERRORS,\n          payload: error.response.data,\n        });\n      });\n  });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}