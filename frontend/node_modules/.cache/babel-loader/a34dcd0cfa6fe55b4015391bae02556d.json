{"ast":null,"code":"import axios from \"axios\";\nimport { GET_ALL_EVENTS, GET_ERRORS, SET_CURRENT_USER } from \"./types\";\nimport jwt_decode from \"jwt-decode\";\nimport { isExpired } from \"react-jwt\";\nimport setToken from \"../securityUtils/setToken\";\nimport store from \"../store\";\nconst token = localStorage.token;\nconst accessToken = localStorage.accessToken;\nconst isMyTokenExpired = isExpired(accessToken);\n\nconst getAccessToken = async token => {\n  try {\n    const refToken = {\n      refresh: token\n    };\n    const res = await axios.post(\"http://localhost:8000/api/auth/token/refresh/\", refToken);\n    setToken(res.data.access);\n    const decoded_token = jwt_decode(res.data.access);\n    store.dispatch({\n      type: SET_CURRENT_USER,\n      payload: decoded_token\n    });\n  } catch (error) {\n    store.dispatch({\n      type: GET_ERRORS,\n      payload: error.message\n    });\n  }\n};\n\nexport const getAllEvents = () => async dispatch => {\n  await getAccessToken(token);\n  const res = await axios.get(`http://localhost:8000/api/event/all/`);\n  dispatch({\n    type: GET_ALL_EVENTS,\n    payload: res.data\n  });\n};\nexport const createNewEvent = (postData, setLoad, setShow, setError) => async dispatch => {\n  await Promise.all([getAccessToken(token).then(() => {\n    try {\n      setLoad(true);\n      const res = axios.post(\"http://localhost:8000/api/event/create/\", postData);\n      console.log(res);\n\n      if (res.data.success == \"true\") {\n        setLoad(false);\n        setShow(true);\n        setError(res.data.message);\n        window.location.reload();\n      }\n\n      dispatch({\n        type: GET_ERRORS,\n        payload: res.data\n      });\n    } catch (error) {\n      setLoad(false);\n      setShow(true);\n      setError(error.response.data.message);\n      dispatch({\n        type: GET_ERRORS,\n        payload: error.response.data\n      });\n    }\n  })]);\n};","map":{"version":3,"sources":["/Users/mananlodhia/Desktop/Projects/EventMatcher/frontend/frontend/src/actions/eventActions.js"],"names":["axios","GET_ALL_EVENTS","GET_ERRORS","SET_CURRENT_USER","jwt_decode","isExpired","setToken","store","token","localStorage","accessToken","isMyTokenExpired","getAccessToken","refToken","refresh","res","post","data","access","decoded_token","dispatch","type","payload","error","message","getAllEvents","get","createNewEvent","postData","setLoad","setShow","setError","Promise","all","then","console","log","success","window","location","reload","response"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { GET_ALL_EVENTS,  GET_ERRORS, SET_CURRENT_USER } from \"./types\";\nimport jwt_decode from \"jwt-decode\";\nimport { isExpired } from \"react-jwt\";\nimport setToken from \"../securityUtils/setToken\";\nimport store from \"../store\";\n\n\nconst token = localStorage.token;\nconst accessToken = localStorage.accessToken\n\nconst isMyTokenExpired = isExpired(accessToken);\n\nconst getAccessToken = async (token) => {\n\n  try {\n    const refToken = {\n      refresh: token,\n    };\n    const res = await axios.post(\n      \"http://localhost:8000/api/auth/token/refresh/\",\n      refToken\n    );\n    setToken(res.data.access);\n    const decoded_token = jwt_decode(res.data.access);\n    store.dispatch({\n      type: SET_CURRENT_USER,\n      payload: decoded_token,\n    });\n  } catch (error) {\n    store.dispatch({\n      type: GET_ERRORS,\n      payload: error.message,\n    });\n  }\n};\n\nexport const getAllEvents = () => async (dispatch) => {\n  await getAccessToken(token);  \n  const res = await axios.get(`http://localhost:8000/api/event/all/`);\n  dispatch({\n    type: GET_ALL_EVENTS,\n    payload: res.data,\n  });\n};\n\nexport const createNewEvent = (postData, setLoad, setShow, setError) => async (dispatch) => {\n  await Promise.all([ \n    getAccessToken(token)\n  .then(() => {\n    try {\n      setLoad(true);\n      const res = axios.post(\"http://localhost:8000/api/event/create/\", postData);\n      console.log(res)\n      if(res.data.success == \"true\"){\n        setLoad(false)\n        setShow(true)\n        setError(res.data.message);\n        window.location.reload();\n      }\n      dispatch({\n        type: GET_ERRORS,\n        payload: res.data,\n      });\n    \n    } catch (error) {\n      setLoad(false);\n      setShow(true);\n      setError(error.response.data.message);\n      dispatch({\n        type: GET_ERRORS,\n        payload: error.response.data,\n      });\n    }\n  })\n])\n  \n\n};\n\n\n\n"]},"metadata":{},"sourceType":"module"}