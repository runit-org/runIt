{"ast":null,"code":"import axios from \"axios\";\nimport { GET_ALL_EVENTS, GET_ERRORS, SET_CURRENT_USER } from \"./types\";\nimport jwt_decode from \"jwt-decode\";\nimport { isExpired } from \"react-jwt\";\nimport setToken from \"../securityUtils/setToken\";\nimport store from \"../store\";\nconst token = localStorage.token;\nconst accessToken = localStorage.accessToken;\nconst isMyTokenExpired = isExpired(accessToken);\n\nconst getAccessToken = async token => {\n  console.log(isMyTokenExpired);\n  console.log(token);\n\n  try {\n    const refToken = {\n      refresh: token\n    };\n    const res = await axios.post(\"http://localhost:8000/api/auth/token/refresh/\", refToken);\n    setToken(res.data.access);\n    const decoded_token = jwt_decode(res.data.access);\n    store.dispatch({\n      type: SET_CURRENT_USER,\n      payload: decoded_token\n    });\n  } catch (error) {\n    store.dispatch({\n      type: GET_ERRORS,\n      payload: error.message\n    });\n  }\n};\n\nexport const getAllEvents = () => async dispatch => {\n  await getAccessToken(token);\n  const res = await axios.get(`http://localhost:8000/api/event/all/`);\n  dispatch({\n    type: GET_ALL_EVENTS,\n    payload: res.data\n  });\n};\nexport const createNewEvent = (postData, setLoad, setShow, setError) => async dispatch => {\n  try {\n    getAccessToken(token).then(response => {\n      setLoad(true);\n      const res = axios.post(\"http://localhost:8000/api/event/create/\", postData);\n      console.log(res);\n\n      if (res.data.success == \"true\") {\n        setLoad(false);\n        setShow(true);\n        setError(res.data.message);\n        window.location.reload();\n      }\n\n      dispatch({\n        type: GET_ERRORS,\n        payload: res.data\n      });\n    });\n  } catch (error) {\n    setLoad(false);\n    setShow(true);\n    setError(error.response.data.message);\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.response.data\n    });\n  }\n};","map":{"version":3,"sources":["/Users/mananlodhia/Desktop/Projects/EventMatcher/frontend/frontend/src/actions/eventActions.js"],"names":["axios","GET_ALL_EVENTS","GET_ERRORS","SET_CURRENT_USER","jwt_decode","isExpired","setToken","store","token","localStorage","accessToken","isMyTokenExpired","getAccessToken","console","log","refToken","refresh","res","post","data","access","decoded_token","dispatch","type","payload","error","message","getAllEvents","get","createNewEvent","postData","setLoad","setShow","setError","then","response","success","window","location","reload"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { GET_ALL_EVENTS,  GET_ERRORS, SET_CURRENT_USER } from \"./types\";\nimport jwt_decode from \"jwt-decode\";\nimport { isExpired } from \"react-jwt\";\nimport setToken from \"../securityUtils/setToken\";\nimport store from \"../store\";\n\n\nconst token = localStorage.token;\nconst accessToken = localStorage.accessToken\n\nconst isMyTokenExpired = isExpired(accessToken);\n\nconst getAccessToken = async (token) => {\n  console.log(isMyTokenExpired)\n  console.log(token)\n  try {\n    const refToken = {\n      refresh: token,\n    };\n    const res = await axios.post(\n      \"http://localhost:8000/api/auth/token/refresh/\",\n      refToken\n    );\n    setToken(res.data.access);\n    const decoded_token = jwt_decode(res.data.access);\n    store.dispatch({\n      type: SET_CURRENT_USER,\n      payload: decoded_token,\n    });\n  } catch (error) {\n    store.dispatch({\n      type: GET_ERRORS,\n      payload: error.message,\n    });\n  }\n};\n\nexport const getAllEvents = () => async (dispatch) => {\n  await getAccessToken(token);  \n  const res = await axios.get(`http://localhost:8000/api/event/all/`);\n  dispatch({\n    type: GET_ALL_EVENTS,\n    payload: res.data,\n  });\n};\n\nexport const createNewEvent = (postData, setLoad, setShow, setError) => async (dispatch) => {\n \n  \n  try {\n     getAccessToken(token)\n    .then((response) => {\n      setLoad(true);\n      const res =  axios.post(\"http://localhost:8000/api/event/create/\", postData);\n      console.log(res)\n      if(res.data.success == \"true\"){\n        setLoad(false)\n        setShow(true)\n        setError(res.data.message);\n        window.location.reload();\n      }\n      dispatch({\n        type: GET_ERRORS,\n        payload: res.data,\n      });\n    })\n    \n  \n  } catch (error) {\n    setLoad(false);\n    setShow(true);\n    setError(error.response.data.message);\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.response.data,\n    });\n  }\n\n};\n\n\n\n"]},"metadata":{},"sourceType":"module"}