{"ast":null,"code":"import axios from \"axios\";\nimport { GET_ALL_EVENTS, GET_ERRORS } from \"./types\";\nimport setToken from \"../securityUtils/setToken\";\nexport const getAllEvents = () => async dispatch => {\n  const res = await axios.get(`http://localhost:8000/api/event/all/`);\n  dispatch({\n    type: GET_ALL_EVENTS,\n    payload: res.data\n  });\n};\nexport const createNewEvent = (postData, setLoad, setShow, setError) => async dispatch => {\n  const ref = await axios.post(\"http://localhost:8000/api/auth/token/refresh/\", localStorage.getItem(\"token\")).then(ref => {\n    console.log(ref.data.access);\n    setToken(ref.data.access);\n\n    try {\n      setLoad(true);\n      const res = axios.post(\"http://localhost:8000/api/event/create/\", postData);\n      console.log(res);\n\n      if (res.data.success == \"true\") {\n        setLoad(false);\n        setShow(true);\n        setError(res.data.message);\n        window.location.reload();\n      }\n\n      dispatch({\n        type: GET_ERRORS,\n        payload: res.data\n      });\n    } catch (error) {\n      setLoad(false);\n      setShow(true);\n      setError(error.response.data.message);\n      dispatch({\n        type: GET_ERRORS,\n        payload: error.response.data\n      });\n    }\n  });\n  /* try {\n    setLoad(true);\n    const res = await axios.post(\"http://localhost:8000/api/event/create/\", postData);\n    console.log(res)\n    if(res.data.success == \"true\"){\n      setLoad(false)\n      setShow(true)\n      setError(res.data.message);\n      window.location.reload();\n    }\n    dispatch({\n      type: GET_ERRORS,\n      payload: res.data,\n    });\n  \n  } catch (error) {\n    setLoad(false);\n    setShow(true);\n    setError(error.response.data.message);\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.response.data,\n    });\n  } */\n};","map":{"version":3,"sources":["/Users/mananlodhia/Desktop/Projects/EventMatcher/frontend/frontend/src/actions/eventActions.js"],"names":["axios","GET_ALL_EVENTS","GET_ERRORS","setToken","getAllEvents","dispatch","res","get","type","payload","data","createNewEvent","postData","setLoad","setShow","setError","ref","post","localStorage","getItem","then","console","log","access","success","message","window","location","reload","error","response"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAA0BC,UAA1B,QAA4C,SAA5C;AACA,OAAOC,QAAP,MAAqB,2BAArB;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACpD,QAAMC,GAAG,GAAG,MAAMN,KAAK,CAACO,GAAN,CAAW,sCAAX,CAAlB;AACAF,EAAAA,QAAQ,CAAC;AACPG,IAAAA,IAAI,EAAEP,cADC;AAEPQ,IAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,GAAD,CAAR;AAID,CANM;AAQP,OAAO,MAAMC,cAAc,GAAG,CAACC,QAAD,EAAWC,OAAX,EAAoBC,OAApB,EAA6BC,QAA7B,KAA0C,MAAOV,QAAP,IAAoB;AAC1F,QAAMW,GAAG,GAAG,MAAMhB,KAAK,CAACiB,IAAN,CAChB,+CADgB,EAEhBC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAFgB,EAGhBC,IAHgB,CAGXJ,GAAG,IAAI;AACZK,IAAAA,OAAO,CAACC,GAAR,CAAYN,GAAG,CAACN,IAAJ,CAASa,MAArB;AACApB,IAAAA,QAAQ,CAACa,GAAG,CAACN,IAAJ,CAASa,MAAV,CAAR;;AACA,QAAI;AACFV,MAAAA,OAAO,CAAC,IAAD,CAAP;AACA,YAAMP,GAAG,GAAGN,KAAK,CAACiB,IAAN,CAAW,yCAAX,EAAsDL,QAAtD,CAAZ;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAYhB,GAAZ;;AACA,UAAGA,GAAG,CAACI,IAAJ,CAASc,OAAT,IAAoB,MAAvB,EAA8B;AAC5BX,QAAAA,OAAO,CAAC,KAAD,CAAP;AACAC,QAAAA,OAAO,CAAC,IAAD,CAAP;AACAC,QAAAA,QAAQ,CAACT,GAAG,CAACI,IAAJ,CAASe,OAAV,CAAR;AACAC,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD;;AACDvB,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAEN,UADC;AAEPO,QAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,OAAD,CAAR;AAKD,KAfD,CAeE,OAAOmB,KAAP,EAAc;AACdhB,MAAAA,OAAO,CAAC,KAAD,CAAP;AACAC,MAAAA,OAAO,CAAC,IAAD,CAAP;AACAC,MAAAA,QAAQ,CAACc,KAAK,CAACC,QAAN,CAAepB,IAAf,CAAoBe,OAArB,CAAR;AACApB,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAEN,UADC;AAEPO,QAAAA,OAAO,EAAEoB,KAAK,CAACC,QAAN,CAAepB;AAFjB,OAAD,CAAR;AAID;AACF,GA9BiB,CAAlB;AA+BA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,CAxDM","sourcesContent":["import axios from \"axios\";\nimport { GET_ALL_EVENTS,  GET_ERRORS } from \"./types\";\nimport setToken from \"../securityUtils/setToken\";\n\nexport const getAllEvents = () => async (dispatch) => {\n  const res = await axios.get(`http://localhost:8000/api/event/all/`);\n  dispatch({\n    type: GET_ALL_EVENTS,\n    payload: res.data,\n  });\n};\n\nexport const createNewEvent = (postData, setLoad, setShow, setError) => async (dispatch) => {\n  const ref = await axios.post(\n    \"http://localhost:8000/api/auth/token/refresh/\",\n    localStorage.getItem(\"token\")\n  ).then(ref => {\n    console.log(ref.data.access)\n    setToken(ref.data.access);\n    try {\n      setLoad(true);\n      const res = axios.post(\"http://localhost:8000/api/event/create/\", postData);\n      console.log(res)\n      if(res.data.success == \"true\"){\n        setLoad(false)\n        setShow(true)\n        setError(res.data.message);\n        window.location.reload();\n      }\n      dispatch({\n        type: GET_ERRORS,\n        payload: res.data,\n      });\n    \n    } catch (error) {\n      setLoad(false);\n      setShow(true);\n      setError(error.response.data.message);\n      dispatch({\n        type: GET_ERRORS,\n        payload: error.response.data,\n      });\n    }\n  })\n  /* try {\n    setLoad(true);\n    const res = await axios.post(\"http://localhost:8000/api/event/create/\", postData);\n    console.log(res)\n    if(res.data.success == \"true\"){\n      setLoad(false)\n      setShow(true)\n      setError(res.data.message);\n      window.location.reload();\n    }\n    dispatch({\n      type: GET_ERRORS,\n      payload: res.data,\n    });\n  \n  } catch (error) {\n    setLoad(false);\n    setShow(true);\n    setError(error.response.data.message);\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.response.data,\n    });\n  } */\n};\n\n\n\n"]},"metadata":{},"sourceType":"module"}