{"ast":null,"code":"var _jsxFileName = \"/Users/Manan/Desktop/runIt/frontend/src/components/Event/event-status.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport { useDispatch } from \"react-redux\";\nimport { getSingleEvent, updateStatus } from \"../../actions/eventActions\";\nimport { Loading } from \"../SiteElements/loader\";\nimport ModalItem from \"./modal-item\";\nimport { useParams } from \"react-router-dom\";\nimport { emitter } from \"../client/socket\";\nimport { PencilSquare } from \"../SiteElements/icons\";\nimport { CANCELLED, FINISHED } from \"./utilities/types\";\nimport { EventMembersHandler } from \"./utilities/action-handlers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventStatus(props) {\n  _s();\n  const dispatch = useDispatch();\n  const ref = /*#__PURE__*/React.createRef();\n  const btnRef = useRef();\n  const [status, setStatus] = useState(\"\");\n  const [load, setLoad] = useState(false);\n  const [error, setError] = useState({});\n  const params = useParams();\n  const eventMembers = EventMembersHandler(props.eventId);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const postData = {\n      status: status\n    };\n    dispatch(updateStatus(props.eventId, postData, setLoad, setError)).then(() => {\n      dispatch(getSingleEvent(params.id));\n      emitter(eventMembers.map(member => member.username));\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ModalItem, {\n      ref: (ref, btnRef),\n      customBtn: \"\",\n      btnIcon: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex align-items-center\",\n        children: [/*#__PURE__*/_jsxDEV(PencilSquare, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this), \"Status\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this),\n      error: error,\n      title: \"Update Status\",\n      content: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            className: \"m-1\",\n            children: [\"Mark your event as \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"FINISHED\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 36\n            }, this), \" or\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"CANCELLED\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"title\",\n            placeholder: \"Christmas social\",\n            pattern: \"(FINISHED|CANCELLED)\",\n            onChange: e => setStatus(e.target.value === FINISHED ? 2 : e.target.value === CANCELLED ? 3 : \"\"),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-2\",\n          children: /*#__PURE__*/_jsxDEV(\"small\", {\n            className: \"text-muted\",\n            children: \"Note: The event status can only be updated once.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true),\n      subBtn: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"me-3 btn-cancel\",\n          onClick: () => btnRef.current.setModalShow(false),\n          children: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          children: (() => {\n            if (load) {\n              return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 26\n              }, this);\n            } else {\n              return /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: \"Update\"\n              }, void 0, false);\n            }\n          })()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this),\n      subHandler: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(EventStatus, \"SnVUcYdg2pb8b2MRbQK5z9MfPkY=\", false, function () {\n  return [useDispatch, useParams];\n});\n_c = EventStatus;\nexport default EventStatus;\nvar _c;\n$RefreshReg$(_c, \"EventStatus\");","map":{"version":3,"names":["React","useState","useRef","Button","Form","useDispatch","getSingleEvent","updateStatus","Loading","ModalItem","useParams","emitter","PencilSquare","CANCELLED","FINISHED","EventMembersHandler","jsxDEV","_jsxDEV","Fragment","_Fragment","EventStatus","props","_s","dispatch","ref","createRef","btnRef","status","setStatus","load","setLoad","error","setError","params","eventMembers","eventId","handleSubmit","e","preventDefault","postData","then","id","map","member","username","children","customBtn","btnIcon","className","fileName","_jsxFileName","lineNumber","columnNumber","title","content","Group","Label","Control","type","placeholder","pattern","onChange","target","value","required","subBtn","onClick","current","setModalShow","subHandler","_c","$RefreshReg$"],"sources":["/Users/Manan/Desktop/runIt/frontend/src/components/Event/event-status.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport { useDispatch } from \"react-redux\";\nimport { getSingleEvent, updateStatus } from \"../../actions/eventActions\";\nimport { Loading } from \"../SiteElements/loader\";\nimport ModalItem from \"./modal-item\";\nimport { useParams } from \"react-router-dom\";\nimport { emitter } from \"../client/socket\";\nimport { PencilSquare } from \"../SiteElements/icons\";\nimport { CANCELLED, FINISHED } from \"./utilities/types\";\nimport { EventMembersHandler } from \"./utilities/action-handlers\";\n\nfunction EventStatus(props) {\n  const dispatch = useDispatch();\n  const ref = React.createRef();\n  const btnRef = useRef();\n  const [status, setStatus] = useState(\"\");\n  const [load, setLoad] = useState(false);\n  const [error, setError] = useState({});\n\n  const params = useParams();\n\n  const eventMembers = EventMembersHandler(props.eventId);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const postData = {\n      status: status,\n    };\n\n    dispatch(updateStatus(props.eventId, postData, setLoad, setError)).then(\n      () => {\n        dispatch(getSingleEvent(params.id));\n        emitter(eventMembers.map((member) => member.username));\n      }\n    );\n  };\n  return (\n    <>\n      <ModalItem\n        ref={(ref, btnRef)}\n        customBtn={\"\"}\n        btnIcon={\n          <div className=\"d-flex align-items-center\">\n            <PencilSquare />\n            Status\n          </div>\n        }\n        error={error}\n        title={\"Update Status\"}\n        content={\n          <>\n            <Form.Group className=\"mb-3\">\n              <Form.Label className=\"m-1\">\n                Mark your event as <strong>FINISHED</strong> or{\" \"}\n                <strong>CANCELLED</strong>\n              </Form.Label>\n              <Form.Control\n                type=\"title\"\n                placeholder=\"Christmas social\"\n                pattern=\"(FINISHED|CANCELLED)\"\n                onChange={(e) =>\n                  setStatus(\n                    e.target.value === FINISHED\n                      ? 2\n                      : e.target.value === CANCELLED\n                      ? 3\n                      : \"\"\n                  )\n                }\n                required\n              />\n            </Form.Group>\n            <div className=\"mt-2\">\n              <small className=\"text-muted\">\n                Note: The event status can only be updated once.\n              </small>\n            </div>\n          </>\n        }\n        subBtn={\n          <div>\n            <hr />\n            <Button\n              className=\"me-3 btn-cancel\"\n              onClick={() => btnRef.current.setModalShow(false)}\n            >\n              Back\n            </Button>\n            <Button type=\"submit\">\n              {(() => {\n                if (load) {\n                  return <Loading />;\n                } else {\n                  return <>Update</>;\n                }\n              })()}\n            </Button>\n          </div>\n        }\n        subHandler={handleSubmit}\n      />\n    </>\n  );\n}\n\nexport default EventStatus;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}