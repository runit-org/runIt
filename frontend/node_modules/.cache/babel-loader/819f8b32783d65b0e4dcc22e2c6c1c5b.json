{"ast":null,"code":"import axios from \"axios\";\nimport { GET_ALL_EVENTS, GET_ERRORS, SET_CURRENT_USER } from \"./types\";\nimport jwt_decode from \"jwt-decode\";\nimport { isExpired } from \"react-jwt\";\nimport setToken from \"./securityActions/setToken\";\nconst token = localStorage.token;\nconst accessToken = localStorage.accessToken;\nconst isMyTokenExpired = isExpired(accessToken);\nconsole.log(isMyTokenExpired);\n\nconst getAccessToken = async token => {\n  try {\n    const refToken = {\n      refresh: token\n    };\n    const res = await axios.post(\"http://localhost:8000/api/auth/token/refresh/\", refToken);\n    setToken(res.data.access);\n    const decoded_token = jwt_decode(res.data.access);\n    dispatch({\n      type: SET_CURRENT_USER,\n      payload: decoded_token\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.message\n    });\n  }\n};\n\nexport const getAllEvents = () => async dispatch => {\n  if (token && isMyTokenExpired) {\n    console.log(\"here\");\n    getAccessToken(token);\n  }\n\n  const res = await axios.get(`http://localhost:8000/api/event/all/`);\n  dispatch({\n    type: GET_ALL_EVENTS,\n    payload: res.data\n  });\n};\nexport const createNewEvent = (postData, setLoad, setShow, setError) => async dispatch => {\n  try {\n    setLoad(true);\n\n    if (token && isMyTokenExpired) {\n      getAccessToken(token);\n    }\n\n    const res = await axios.post(\"http://localhost:8000/api/event/create/\", postData);\n    console.log(res);\n\n    if (res.data.success == \"true\") {\n      setLoad(false);\n      setShow(true);\n      setError(res.data.message);\n      window.location.reload();\n    }\n\n    dispatch({\n      type: GET_ERRORS,\n      payload: res.data\n    });\n  } catch (error) {\n    setLoad(false);\n    setShow(true);\n    setError(error.response.data.message);\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.response.data\n    });\n  }\n};","map":{"version":3,"sources":["/Users/mananlodhia/Desktop/Projects/EventMatcher/frontend/frontend/src/actions/eventActions.js"],"names":["axios","GET_ALL_EVENTS","GET_ERRORS","SET_CURRENT_USER","jwt_decode","isExpired","setToken","token","localStorage","accessToken","isMyTokenExpired","console","log","getAccessToken","refToken","refresh","res","post","data","access","decoded_token","dispatch","type","payload","error","message","getAllEvents","get","createNewEvent","postData","setLoad","setShow","setError","success","window","location","reload","response"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAA0BC,UAA1B,EAAsCC,gBAAtC,QAA8D,SAA9D;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,OAAOC,QAAP,MAAqB,4BAArB;AAGA,MAAMC,KAAK,GAAGC,YAAY,CAACD,KAA3B;AACA,MAAME,WAAW,GAAGD,YAAY,CAACC,WAAjC;AAEA,MAAMC,gBAAgB,GAAGL,SAAS,CAACI,WAAD,CAAlC;AACAE,OAAO,CAACC,GAAR,CAAYF,gBAAZ;;AAEA,MAAMG,cAAc,GAAG,MAAON,KAAP,IAAiB;AACtC,MAAI;AACF,UAAMO,QAAQ,GAAG;AACfC,MAAAA,OAAO,EAAER;AADM,KAAjB;AAGA,UAAMS,GAAG,GAAG,MAAMhB,KAAK,CAACiB,IAAN,CAChB,+CADgB,EAEhBH,QAFgB,CAAlB;AAIAR,IAAAA,QAAQ,CAACU,GAAG,CAACE,IAAJ,CAASC,MAAV,CAAR;AACA,UAAMC,aAAa,GAAGhB,UAAU,CAACY,GAAG,CAACE,IAAJ,CAASC,MAAV,CAAhC;AACAE,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEnB,gBADC;AAEPoB,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAID,GAdD,CAcE,OAAOI,KAAP,EAAc;AACdH,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEpB,UADC;AAEPqB,MAAAA,OAAO,EAAEC,KAAK,CAACC;AAFR,KAAD,CAAR;AAID;AACF,CArBD;;AAuBA,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAOL,QAAP,IAAoB;AACpD,MAAId,KAAK,IAAIG,gBAAb,EAAgC;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAC,IAAAA,cAAc,CAACN,KAAD,CAAd;AACD;;AACD,QAAMS,GAAG,GAAG,MAAMhB,KAAK,CAAC2B,GAAN,CAAW,sCAAX,CAAlB;AACAN,EAAAA,QAAQ,CAAC;AACPC,IAAAA,IAAI,EAAErB,cADC;AAEPsB,IAAAA,OAAO,EAAEP,GAAG,CAACE;AAFN,GAAD,CAAR;AAID,CAVM;AAYP,OAAO,MAAMU,cAAc,GAAG,CAACC,QAAD,EAAWC,OAAX,EAAoBC,OAApB,EAA6BC,QAA7B,KAA0C,MAAOX,QAAP,IAAoB;AAC1F,MAAI;AACFS,IAAAA,OAAO,CAAC,IAAD,CAAP;;AACA,QAAIvB,KAAK,IAAIG,gBAAb,EAAgC;AAC9BG,MAAAA,cAAc,CAACN,KAAD,CAAd;AACD;;AACD,UAAMS,GAAG,GAAG,MAAMhB,KAAK,CAACiB,IAAN,CAAW,yCAAX,EAAsDY,QAAtD,CAAlB;AACAlB,IAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ;;AACA,QAAGA,GAAG,CAACE,IAAJ,CAASe,OAAT,IAAoB,MAAvB,EAA8B;AAC5BH,MAAAA,OAAO,CAAC,KAAD,CAAP;AACAC,MAAAA,OAAO,CAAC,IAAD,CAAP;AACAC,MAAAA,QAAQ,CAAChB,GAAG,CAACE,IAAJ,CAASO,OAAV,CAAR;AACAS,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD;;AACDf,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEpB,UADC;AAEPqB,MAAAA,OAAO,EAAEP,GAAG,CAACE;AAFN,KAAD,CAAR;AAKD,GAlBD,CAkBE,OAAOM,KAAP,EAAc;AACdM,IAAAA,OAAO,CAAC,KAAD,CAAP;AACAC,IAAAA,OAAO,CAAC,IAAD,CAAP;AACAC,IAAAA,QAAQ,CAACR,KAAK,CAACa,QAAN,CAAenB,IAAf,CAAoBO,OAArB,CAAR;AACAJ,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEpB,UADC;AAEPqB,MAAAA,OAAO,EAAEC,KAAK,CAACa,QAAN,CAAenB;AAFjB,KAAD,CAAR;AAID;AACF,CA5BM","sourcesContent":["import axios from \"axios\";\nimport { GET_ALL_EVENTS,  GET_ERRORS, SET_CURRENT_USER } from \"./types\";\nimport jwt_decode from \"jwt-decode\";\nimport { isExpired } from \"react-jwt\";\nimport setToken from \"./securityActions/setToken\";\n\n\nconst token = localStorage.token;\nconst accessToken = localStorage.accessToken\n\nconst isMyTokenExpired = isExpired(accessToken);\nconsole.log(isMyTokenExpired)\n\nconst getAccessToken = async (token) => {\n  try {\n    const refToken = {\n      refresh: token,\n    };\n    const res = await axios.post(\n      \"http://localhost:8000/api/auth/token/refresh/\",\n      refToken\n    );\n    setToken(res.data.access);\n    const decoded_token = jwt_decode(res.data.access);\n    dispatch({\n      type: SET_CURRENT_USER,\n      payload: decoded_token,\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.message,\n    });\n  }\n};\n\nexport const getAllEvents = () => async (dispatch) => {\n  if (token && isMyTokenExpired ) {\n    console.log(\"here\")\n    getAccessToken(token);\n  }\n  const res = await axios.get(`http://localhost:8000/api/event/all/`);\n  dispatch({\n    type: GET_ALL_EVENTS,\n    payload: res.data,\n  });\n};\n\nexport const createNewEvent = (postData, setLoad, setShow, setError) => async (dispatch) => {\n  try {\n    setLoad(true);\n    if (token && isMyTokenExpired ) {\n      getAccessToken(token);\n    }\n    const res = await axios.post(\"http://localhost:8000/api/event/create/\", postData);\n    console.log(res)\n    if(res.data.success == \"true\"){\n      setLoad(false)\n      setShow(true)\n      setError(res.data.message);\n      window.location.reload();\n    }\n    dispatch({\n      type: GET_ERRORS,\n      payload: res.data,\n    });\n  \n  } catch (error) {\n    setLoad(false);\n    setShow(true);\n    setError(error.response.data.message);\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.response.data,\n    });\n  }\n};\n\n\n\n"]},"metadata":{},"sourceType":"module"}