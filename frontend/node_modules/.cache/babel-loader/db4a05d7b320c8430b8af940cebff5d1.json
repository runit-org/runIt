{"ast":null,"code":"import axios from \"axios\";\nimport { GET_USERS, GET_ERRORS, SET_CURRENT_USER, SET_NEW_USER } from \"./types\";\nimport setToken from \"../securityUtils/setToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { isExpired } from \"react-jwt\";\nimport store from \"../store\";\nconst token = localStorage.token;\nconst accessToken = localStorage.accessToken;\nconst isMyTokenExpired = isExpired(accessToken);\n\nconst getAccessToken = async token => {\n  console.log(isMyTokenExpired);\n  console.log(token);\n\n  try {\n    const refToken = {\n      refresh: token\n    };\n    const res = await axios.post(\"http://localhost:8000/api/auth/token/refresh/\", refToken);\n    setToken(res.data.access);\n    const decoded_token = jwt_decode(res.data.access);\n    store.dispatch({\n      type: SET_CURRENT_USER,\n      payload: decoded_token\n    });\n  } catch (error) {\n    store.dispatch({\n      type: GET_ERRORS,\n      payload: error.message\n    });\n  }\n};\n\nexport const getUsers = () => async dispatch => {\n  const res = await axios.get(`http://localhost:8000/api/user/all/`); // console.log(res)\n\n  dispatch({\n    type: GET_USERS,\n    payload: res.data\n  });\n};\nexport const createNewUser = (userData, setLoad, setShow, setError) => async dispatch => {\n  try {\n    setLoad(true);\n    const res = await axios.post(\"http://localhost:8000/api/auth/register/\", userData);\n\n    if (res.data.success == \"true\") {\n      setLoad(false);\n      setShow(true);\n      setError(res.data.message);\n    }\n\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n    dispatch({\n      type: SET_NEW_USER,\n      payload: res.data\n    });\n  } catch (error) {\n    setLoad(false);\n    setShow(true);\n    setError(error.response.data.message);\n    dispatch({\n      type: SET_NEW_USER,\n      payload: {}\n    });\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.response.data\n    });\n  }\n};\nexport const login = (LoginRequest, navigate, setLoad, setShow, setError) => async dispatch => {\n  try {\n    //post => login request\n    setLoad(true);\n    const res = await axios.post(\"http://localhost:8000/api/auth/login/\", LoginRequest); //extract token from data\n\n    const refToken = res.data.refresh;\n    const accessToken = res.data.access; //store token in local storage\n\n    localStorage.setItem(\"token\", refToken);\n    localStorage.setItem(\"accessToken\", accessToken); //set token in header\n\n    setToken(accessToken); //get data from response\n\n    const decoded = {\n      username: res.data.username\n    };\n    localStorage.setItem(\"username\", decoded.username);\n\n    if (localStorage.getItem(\"token\")) {\n      navigate(\"/posts\");\n    } //dispatch to securityReducer\n\n    /*  dispatch({\n    type: GET_ERRORS,\n    payload: {},\n    }); */\n\n\n    dispatch({\n      type: SET_CURRENT_USER,\n      payload: decoded\n    });\n  } catch (error) {\n    setLoad(false);\n    setShow(true);\n    setError(error.response.data.detail);\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.response.data\n    });\n  }\n};\nexport const logout = (refToken, navigate) => async dispatch => {\n  await Promise.all(getAccessToken(token).then(() => {\n    const res = axios.post(\"http://localhost:8000/api/auth/logout/\", refToken);\n    setToken(false);\n    localStorage.clear(); // navigate(\"/\");\n\n    if (!localStorage.getItem(\"token\")) {\n      navigate(\"/\");\n    }\n\n    dispatch({\n      type: SET_CURRENT_USER,\n      payload: null\n    });\n  }));\n};\n/* export const getUser = () => async (dispatch) => {\n  const res = await axios.get(`http://localhost:8000/api/user/`);\n  dispatch({\n    type: GET_USER,\n    payload: res.data,\n  });\n}; */","map":{"version":3,"sources":["/Users/mananlodhia/Desktop/Projects/EventMatcher/frontend/frontend/src/actions/securityActions.js"],"names":["axios","GET_USERS","GET_ERRORS","SET_CURRENT_USER","SET_NEW_USER","setToken","jwt_decode","isExpired","store","token","localStorage","accessToken","isMyTokenExpired","getAccessToken","console","log","refToken","refresh","res","post","data","access","decoded_token","dispatch","type","payload","error","message","getUsers","get","createNewUser","userData","setLoad","setShow","setError","success","response","login","LoginRequest","navigate","setItem","decoded","username","getItem","detail","logout","Promise","all","then","clear"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { GET_USERS, GET_ERRORS, SET_CURRENT_USER, SET_NEW_USER } from \"./types\";\nimport setToken from \"../securityUtils/setToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { isExpired } from \"react-jwt\";\nimport store from \"../store\";\n\n\nconst token = localStorage.token;\nconst accessToken = localStorage.accessToken\n\nconst isMyTokenExpired = isExpired(accessToken);\n\nconst getAccessToken = async (token) => {\n  console.log(isMyTokenExpired)\n  console.log(token)\n  try {\n    const refToken = {\n      refresh: token,\n    };\n    const res = await axios.post(\n      \"http://localhost:8000/api/auth/token/refresh/\",\n      refToken\n    );\n    setToken(res.data.access);\n    const decoded_token = jwt_decode(res.data.access);\n    store.dispatch({\n      type: SET_CURRENT_USER,\n      payload: decoded_token,\n    });\n  } catch (error) {\n    store.dispatch({\n      type: GET_ERRORS,\n      payload: error.message,\n    });\n  }\n};\n\nexport const getUsers = () => async (dispatch) => {\n  const res = await axios.get(`http://localhost:8000/api/user/all/`);\n  // console.log(res)\n  dispatch({\n    type: GET_USERS,\n    payload: res.data,\n  });\n};\n\nexport const createNewUser =\n  (userData, setLoad, setShow, setError) => async (dispatch) => {\n    try {\n      setLoad(true);\n      const res = await axios.post(\n        \"http://localhost:8000/api/auth/register/\",\n        userData\n      );\n\n      if (res.data.success == \"true\") {\n        setLoad(false);\n        setShow(true);\n        setError(res.data.message);\n      }\n      dispatch({\n        type: GET_ERRORS,\n        payload: {},\n      });\n      dispatch({\n        type: SET_NEW_USER,\n        payload: res.data,\n      });\n    } catch (error) {\n      setLoad(false);\n      setShow(true);\n      setError(error.response.data.message);\n      dispatch({\n        type: SET_NEW_USER,\n        payload: {},\n      });\n      dispatch({\n        type: GET_ERRORS,\n        payload: error.response.data,\n      });\n    }\n  };\n\nexport const login =\n  (LoginRequest, navigate, setLoad, setShow, setError) => async (dispatch) => {\n    try {\n      //post => login request\n      setLoad(true);\n      const res = await axios.post(\n        \"http://localhost:8000/api/auth/login/\",\n        LoginRequest\n      );\n\n      //extract token from data\n      const refToken = res.data.refresh;\n      const accessToken = res.data.access;\n      //store token in local storage\n      localStorage.setItem(\"token\", refToken);\n      localStorage.setItem(\"accessToken\", accessToken);\n      //set token in header\n      setToken(accessToken);\n      //get data from response\n      const decoded = {\n        username: res.data.username,\n      };\n\n      localStorage.setItem(\"username\", decoded.username);\n      if (localStorage.getItem(\"token\")) {\n        navigate(\"/posts\");\n      }\n\n      //dispatch to securityReducer\n      /*  dispatch({\n      type: GET_ERRORS,\n      payload: {},\n    }); */\n      dispatch({\n        type: SET_CURRENT_USER,\n        payload: decoded,\n      });\n    } catch (error) {\n      setLoad(false);\n      setShow(true);\n      setError(error.response.data.detail);\n      dispatch({\n        type: GET_ERRORS,\n        payload: error.response.data,\n      });\n    }\n  };\n\nexport const logout = (refToken, navigate) => async (dispatch) => {\n  await Promise.all( \n    getAccessToken(token)\n  .then(() => {\n    const res =  axios.post(\n      \"http://localhost:8000/api/auth/logout/\",\n      refToken\n    );\n  \n    setToken(false);\n    localStorage.clear();\n    // navigate(\"/\");\n    if (!localStorage.getItem(\"token\")) {\n      navigate(\"/\");\n    }\n    dispatch({\n      type: SET_CURRENT_USER,\n      payload: null,\n    });\n  })\n  )\n \n};\n\n/* export const getUser = () => async (dispatch) => {\n  const res = await axios.get(`http://localhost:8000/api/user/`);\n  dispatch({\n    type: GET_USER,\n    payload: res.data,\n  });\n}; */\n"]},"metadata":{},"sourceType":"module"}